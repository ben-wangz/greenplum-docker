import java.util.concurrent.TimeUnit

buildscript {
    repositories {
        maven { url("https://maven.aliyun.com/repository/public") }
        maven { url("https://maven.aliyun.com/repository/spring") }
        maven { url("https://maven.aliyun.com/repository/mapr-public") }
        maven { url("https://maven.aliyun.com/repository/spring-plugin") }
        maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url("https://maven.aliyun.com/repository/google") }
        maven { url("https://maven.aliyun.com/repository/jcenter") }
    }
}
plugins {
    id "de.undercouch.download" version "4.1.1"
}

def mainVersion = "1.0.0"
Map<String, String> envMap = new HashMap<>(System.getenv())
def imageRepository = envMap.getOrDefault("IMAGE_REPOSITORY", "wangz2019/greenplum-docker")
def greenplumPackageUrl = envMap.getOrDefault(
        "GREEN_PLUM_PACKAGE_URL",
        "https://github.com/greenplum-db/gpdb/releases/download/6.8.1/greenplum-db-6.8.1-rhel7-x86_64.rpm"
)
String imageWithTag = "${imageRepository}:${mainVersion}"
File runtimeDockerDirectory = project.file("${project.buildDir}/runtime/docker")
task buildDockerImage(type: Exec) {
    def centosSystemdTag = "1.3.0-centos7.9.2009"
    doFirst {
        runtimeDockerDirectory.parentFile.mkdirs()
        runtimeDockerDirectory.delete()
        copy {
            from project.file("docker")
            into runtimeDockerDirectory
        }
        String downloadDirectory = "${project.buildDir}/runtime/download"
        project.file(downloadDirectory).mkdirs()
        download {
            src greenplumPackageUrl
            dest downloadDirectory
            tempAndMove true
            overwrite false
        }
        copy {
            from project.file("${downloadDirectory}/greenplum-db-6.8.1-rhel7-x86_64.rpm")
            into runtimeDockerDirectory
        }
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "buildx",
            "build",
            "--platform", "linux/amd64",
            "--rm", runtimeDockerDirectory,
            "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
            "-t", imageWithTag,
            "--build-arg", "CENTOS_SYSTEMD_TAG=${centosSystemdTag}",
            "--push",
    )
}
def keysDirectory = project.file("${project.buildDir}/runtime/keys")
def privateKeyFile = project.file("${keysDirectory}/id_rsa")
def publicKeyFile = project.file("${keysDirectory}/id_rsa.pub")
task generateSshKey(type: Exec) {
    if (privateKeyFile.exists() && publicKeyFile.exists()) {
        println("skip ${name} as files exists")
        enabled(false)
    }
    doFirst {
        keysDirectory.mkdirs()
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("ssh-keygen")
    args(
            "-t", "rsa",
            "-b", "4096",
            "-N", "",
            "-f", "${keysDirectory}/id_rsa"
    )
}
def singleton = [
        containerName: "greenplum-singleton",
        hostname     : "gpmaster",
        sshPort      : "1022",
        databasePort : "5432",
]
task runSingleNode(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "-p", "${singleton.sshPort}:22",
            "-p", "${singleton.databasePort}:5432",
            "--platform=linux/amd64",
            "--name", singleton.containerName,
            "--hostname", singleton.hostname,
            "--privileged",
            "-v", "${publicKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa.pub:ro",
            "-v", "${privateKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa:ro",
            // TODO change value
            "-e", "ROLE=MASTERWITHSLAVE",
            "-e", "MASTER_HOSTNAME=${singleton.hostname}",
            "-d", imageWithTag
    )
    dependsOn(generateSshKey)
    doLast {
        // TODO wait for ssh service to be ready: checking it
        TimeUnit.SECONDS.sleep(30)
        exec {
            commandLine("docker", "exec", "-i", singleton.containerName, "/opt/greenplum/entry_point.sh")
        }
    }
}
task stopSingleNode(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "kill", singleton.containerName,
    )
}

task testGreenPlumService(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "--platform=linux/amd64",
            // TODO rename test.sh
            "-v", "${project.file("runtime")}/test.sh:/tmp/test.sh",
            imageWithTag,
            "/bin/bash", "/tmp/test.sh"
    )
}

def subnet = "172.18.0.0/16"
def netWorkName = "mynet"

task createNetwork(type: Exec) {
    executable("docker")
    args(
            "network", "create",
            "--subnet", subnet,
            netWorkName
    )
}

def containerName = "greenplum"
def masterhostname = "gpmaster"
def masterIp = "172.18.0.22"
task runMasterWithSlaveDockerContainer(type: Exec) {
    doFirst {
        keysDirectory.mkdirs()
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "--net", netWorkName,
            "--ip", masterIp,
            "-p", "1022:22",
            "-p", "5432:5432",
            "--platform=linux/amd64",
            "--name", containerName,
            "--hostname", masterhostname,
            "--privileged",
            "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
            "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
            "-e", "ROLE=MASTERWITHSLAVE",
            "-e", "MASTER_HOSTNAME=${masterhostname}",
            "-d", imageWithTag
    )
    dependsOn(generateSshKey)
}

task initMasterWithSlaveGpService() {
    doLast {
        runInitDockerCommand(containerName)
    }
}

List<Map<String, String>> slaveNodes = Arrays.asList(
        new HashMap<String, String>() {
            {
                put("netWorkName", netWorkName)
                put("slaveIp", "172.18.0.23")
                put("slaveContainerName", "slave01")
                put("slaveHostName", "slave01")
                put("slaveSshPort", "1023")
                put("slaveGpPort", "5433")
                put("rsa_pub", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro")
                put("rsa", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro")
                put("imageWithTag", imageWithTag)
            }
        },
        new HashMap<String, String>() {
            {
                put("netWorkName", netWorkName)
                put("slaveIp", "172.18.0.24")
                put("slaveContainerName", "slave02")
                put("slaveHostName", "slave02")
                put("slaveSshPort", "1024")
                put("slaveGpPort", "5434")
                put("rsa_pub", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro")
                put("rsa", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro")
                put("imageWithTag", imageWithTag)
            }
        })
task runClusterDockerContainer() {
    doLast {
        List<String> command = new ArrayList<>(Arrays.asList(
                "docker",
                "run", "--rm",
                "--net", netWorkName,
                "--ip", masterIp,
                "-p", "1022:22",
                "-p", "5432:5432",
                "--platform=linux/amd64",
                "--name", containerName,
                "--hostname", masterhostname,
                "--privileged",
                "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
                "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
                "-e", "ROLE=CLUSTER",
                "-e", "HOSTNAME=${masterhostname}",
                "-e"
        ))
        String slaveName = "SLAVE_HOSTNAME_LIST="
        for (Map<String, String> slaveNode : slaveNodes) {
            slaveName += slaveNode.get("slaveHostName") + " ";
        }
        command.add(slaveName);
        for (Map<String, String> slaveNode : slaveNodes) {
            command.add("--add-host")
            command.add(slaveNode.get("slaveHostName") + ":" + slaveNode.get("slaveIp"));
        }
        command.add("-d");
        command.add(imageWithTag);
        exec {
            commandLine(
                    command
            )
        }
        for (Map<String, String> slaveNode : slaveNodes) {
            runCreateSlaveDockerCommand(slaveNode)
        }
    }
    dependsOn(generateSshKey)
}

private ExecResult runCreateSlaveDockerCommand(Map<String, String> slaveNode) {
    exec {
        commandLine(
                "docker",
                "run", "--rm",
                "--net", slaveNode.get("netWorkName"),
                "--ip", slaveNode.get("slaveIp"),
                "-p", slaveNode.get("slaveSshPort") + ":22",
                "-p", slaveNode.get("slaveGpPort") + ":5432",
                "--platform=linux/amd64",
                "--name", slaveNode.get("slaveContainerName"),
                "--hostname", slaveNode.get("slaveHostName"),
                "--privileged",
                "-e", "ROLE=SLAVE",
                "-v", slaveNode.get("rsa_pub"),
                "-v", slaveNode.get("rsa"),
                "-d", slaveNode.get("imageWithTag")
        )
    }
}

task initClusterGpService() {
    doLast {
        for (Map<String, String> slaveNode : slaveNodes) {
            runInitDockerCommand(slaveNode.get("slaveContainerName"))
        }
        runInitDockerCommand(containerName)
    }
}

private ExecResult runInitDockerCommand(String containerName) {
    exec {
        commandLine(
                "docker",
                "exec", containerName,
                "/opt/greenplum/entry_point.sh",
        )
    }
}

def testIp = "172.18.0.25"
def testHostName = "test"
def testContainerName = "test"
task testWithGpload(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "--net", netWorkName,
            "--ip", testIp,
            "-p", "1025:22",
            "-p", "5435:5432",
            "--platform=linux/amd64",
            "--name", testContainerName,
            "--hostname", testHostName,
            "--privileged",
            // TODO rename test.sh
            "-v", "${project.file("runtime")}/test.sh:/opt/greenplum/entry_point.sh",
            imageWithTag,
            "/bin/bash", "/opt/greenplum/entry_point.sh"
    )
}

task stopMasterWithSlaveDockerContainer() {
    doLast {
        runStopDockerCommand(containerName)
    }
}

task stopClusterDockerContainer() {
    doLast {
        runStopDockerCommand(containerName)
        for (Map<String, String> slaveNode : slaveNodes) {
            runStopDockerCommand(slaveNode.get("slaveContainerName"))
        }
    }
}

private ExecResult runStopDockerCommand(String containerName) {
    exec {
        commandLine(
                "docker",
                "stop", containerName
        )
    }
}

apply from: project.file("docs.nginx.gradle")
