import groovy.json.JsonSlurper

import java.util.concurrent.TimeUnit
import java.util.stream.Collectors
import java.util.stream.IntStream
import java.util.stream.Stream

buildscript {
    repositories {
        maven { url("https://maven.aliyun.com/repository/public") }
        maven { url("https://maven.aliyun.com/repository/spring") }
        maven { url("https://maven.aliyun.com/repository/mapr-public") }
        maven { url("https://maven.aliyun.com/repository/spring-plugin") }
        maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url("https://maven.aliyun.com/repository/google") }
        maven { url("https://maven.aliyun.com/repository/jcenter") }
    }
}
plugins {
    id "de.undercouch.download" version "4.1.1"
}
ext {
    dockerHostInternal = "host.docker.internal"
}

def mainVersion = "1.0.0"
Map<String, String> envMap = new HashMap<>(System.getenv())
def imageRepository = envMap.getOrDefault("IMAGE_REPOSITORY", "wangz2019/greenplum-docker")
def greenplumPackageUrl = envMap.getOrDefault(
        "GREEN_PLUM_PACKAGE_URL",
        "https://github.com/greenplum-db/gpdb/releases/download/6.8.1/greenplum-db-6.8.1-rhel7-x86_64.rpm"
)
String imageWithTag = "${imageRepository}:${mainVersion}"
File runtimeDockerDirectory = project.file("${project.buildDir}/runtime/docker")
task buildDockerImage(type: Exec) {
    def centosSystemdTag = "1.3.0-centos7.9.2009"
    doFirst {
        runtimeDockerDirectory.parentFile.mkdirs()
        runtimeDockerDirectory.delete()
        copy {
            from project.file("docker")
            into runtimeDockerDirectory
        }
        String downloadDirectory = "${project.buildDir}/runtime/download"
        project.file(downloadDirectory).mkdirs()
        download {
            src greenplumPackageUrl
            dest downloadDirectory
            tempAndMove true
            overwrite false
        }
        copy {
            from project.file("${downloadDirectory}/greenplum-db-6.8.1-rhel7-x86_64.rpm")
            into runtimeDockerDirectory
        }
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "buildx",
            "build",
            "--platform", "linux/amd64",
            "--rm", runtimeDockerDirectory,
            "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
            "-t", imageWithTag,
            "--build-arg", "CENTOS_SYSTEMD_TAG=${centosSystemdTag}",
            "--push",
    )
}
def keysDirectory = project.file("${project.buildDir}/runtime/keys")
def privateKeyFile = project.file("${keysDirectory}/id_rsa")
def publicKeyFile = project.file("${keysDirectory}/id_rsa.pub")
task generateSshKey(type: Exec) {
    if (privateKeyFile.exists() && publicKeyFile.exists()) {
        println("skip ${name} as files exists")
        enabled(false)
    }
    doFirst {
        keysDirectory.mkdirs()
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("ssh-keygen")
    args(
            "-t", "rsa",
            "-b", "4096",
            "-N", "",
            "-f", "${keysDirectory}/id_rsa"
    )
}
def singleton = [
        containerName: "greenplum-singleton",
        hostname     : "gpmaster",
        sshPort      : 1022,
        databasePort : 5432,
]
task runSingleton() {
    doLast {
        runMasterNode(
                singleton.sshPort,
                singleton.databasePort,
                singleton.containerName,
                singleton.hostname,
                publicKeyFile,
                privateKeyFile,
                imageWithTag,
        )
    }
    dependsOn(generateSshKey)
}
task stopSingleton(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "kill", singleton.containerName,
    )
}

task testSingleton() {
    doLast {
        testGreenPlumLoad(
                imageWithTag,
                "${project.ext.dockerHostInternal}", singleton.databasePort,
                "gpadmin", "gparray",
                60000,
        )
    }
}

def cluster = [
        dockerNetworkName       : "greenplum-cluster-network",
        masterContainerName     : "greenplum-master",
        masterHostname          : "gpmaster",
        masterSshPort           : singleton.sshPort,
        masterDatabasePort      : singleton.databasePort,
        slaveSize               : 2,
        slaveContainerNamePrefix: "greenplum-slave",
        slaveHostnamePrefix     : "slave",
]
List<String> slaveContainerNameList = IntStream.range(0, cluster.slaveSize)
        .boxed()
        .map(index -> "${cluster.slaveContainerNamePrefix}-${index}")
        .collect(Collectors.toList())
task createClusterNetwork(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "network", "create", cluster.dockerNetworkName
    )
}
task runCluster() {
    doLast {
        List<String> slaveHostnameList = IntStream.range(0, cluster.slaveSize)
                .boxed()
                .map(index -> "${cluster.slaveHostnamePrefix}-${index}")
                .collect(Collectors.toList())
        Map<String, String> slaveHostnameIpMapping = IntStream.range(0, cluster.slaveSize)
                .boxed()
                .collect(Collectors.toMap(
                        index -> slaveHostnameList.get(index as int),
                        index -> runSlaveNode(
                                cluster.dockerNetworkName,
                                slaveContainerNameList.get(index as int),
                                slaveHostnameList.get(index as int),
                                publicKeyFile,
                                privateKeyFile,
                                imageWithTag
                        ),
                ))
        runMasterNode(
                cluster.masterSshPort,
                cluster.masterDatabasePort,
                cluster.masterContainerName,
                cluster.masterHostname,
                publicKeyFile,
                privateKeyFile,
                imageWithTag,
                "CLUSTER-MASTER",
                cluster.dockerNetworkName,
                slaveHostnameIpMapping,
        )
    }
    dependsOn(generateSshKey)
}
task testCluster() {
    doLast {
        testGreenPlumLoad(
                imageWithTag,
                "${project.ext.dockerHostInternal}", cluster.masterDatabasePort,
                "gpadmin", "gparray",
                60000,
        )
    }
}
task stopCluster() {
    doLast {
        Stream.concat(
                slaveContainerNameList.stream(),
                Stream.of(cluster.masterContainerName),
        ).forEach(containerName -> {
            exec {
                def execSpec = commandLine("docker", "kill", containerName)
                println("running command: ${String.join(" ", execSpec.getCommandLine())}")
            }
        })
    }
}
task deleteClusterNetwork(type: Exec) {
    doFirst {
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "network", "rm", cluster.dockerNetworkName
    )
}

private void runMasterNode(
        int sshPort,
        int databasePort,
        String containerName,
        String hostname,
        File publicKeyFile,
        File privateKeyFile,
        String imageWithTag
) {
    runMasterNode(
            sshPort,
            databasePort,
            containerName,
            hostname,
            publicKeyFile,
            privateKeyFile,
            imageWithTag,
            "SINGLETON",
            null,
            new HashMap<String, String>(),
    )
}

private void runMasterNode(
        int sshPort,
        int databasePort,
        String containerName,
        String hostname,
        File publicKeyFile,
        File privateKeyFile,
        String imageWithTag,
        String deployType,
        String networkName,
        Map<String, String> slaveHostnameIpMapping
) {
    List<String> commandLineArray = [
            "docker",
            "run", "--rm",
            "-p", "${sshPort}:22",
            "-p", "${databasePort}:5432",
            "--platform=linux/amd64",
            "--name", containerName,
            "--hostname", hostname,
            "--add-host", "${project.ext.dockerHostInternal}:host-gateway",
    ]
    if (null != networkName) {
        commandLineArray.addAll([
                "--net", networkName,
        ])
    }
    if (null != slaveHostnameIpMapping) {
        commandLineArray.addAll(
                slaveHostnameIpMapping.entrySet()
                        .stream()
                        .flatMap(entry -> Stream.of(
                                "--add-host", "${entry.getKey()}:${entry.getValue()}" as String))
                        .collect(Collectors.toList())
        )
    }
    commandLineArray.addAll([
            "--privileged",
            "-v", "${publicKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa.pub:ro",
            "-v", "${privateKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa:ro",
            "-e", "DEPLOY_TYPE=${deployType}",
            "-e", "MASTER_HOSTNAME=${hostname}",
            "-e", "SLAVE_HOSTNAME_LIST=${slaveHostnameIpMapping.keySet().stream().collect(Collectors.joining(" "))}",
            "-d", imageWithTag
    ])
    exec {
        def execSpec = commandLine(commandLineArray)
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
    waitForHealthy(containerName)
    exec {
        def execSpec = commandLine(
                "docker", "exec", "-i", containerName, "/opt/greenplum/initialize.sh")
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
}

private String runSlaveNode(
        String networkName,
        String containerName,
        String hostname,
        File publicKeyFile,
        File privateKeyFile,
        String imageWithTag
) {
    exec {
        def execSpec = commandLine(
                "docker",
                "run", "--rm",
                "--platform=linux/amd64",
                "--name", containerName,
                "--hostname", hostname,
                "--net", networkName,
                "--add-host", "${project.ext.dockerHostInternal}:host-gateway",
                "--privileged",
                "-v", "${publicKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa.pub:ro",
                "-v", "${privateKeyFile.getAbsolutePath()}:/opt/greenplum/ssh/id_rsa:ro",
                "-e", "DEPLOY_TYPE=CLUSTER-SLAVE",
                "-d", imageWithTag
        )
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
    waitForHealthy(containerName)
    exec {
        def execSpec = commandLine("docker", "exec", "-i", containerName, "/opt/greenplum/initialize.sh")
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
    return findIp(containerName, networkName)
}

private void waitForHealthy(String containerName) {
    while (!healthy(containerName)) {
        TimeUnit.SECONDS.sleep(3)
        println("waiting for container($containerName) to be ready...")
    }
}

private boolean healthy(String containerName) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def execSpec = commandLine(
                "docker", "inspect", containerName
        )
        standardOutput = stdout
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
    def inspectResult = new JsonSlurper().parseText(stdout.toString())
    return "healthy" == inspectResult[0].State.Health.Status
}

private String findIp(String containerName, String networkName) {
    def stdout = new ByteArrayOutputStream()
    exec {
        def execSpec = commandLine(
                "docker", "inspect", containerName
        )
        standardOutput = stdout
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
    def inspectResult = new JsonSlurper().parseText(stdout.toString())
    return inspectResult[0].NetworkSettings.Networks[networkName].IPAddress
}

private void testGreenPlumLoad(
        String imageWithTag,
        String host, int port,
        String username, String password,
        int gpLoadPort
) {
    exec {
        def execSpec = commandLine(
                "docker",
                "run", "--rm",
                "--platform=linux/amd64",
                "--add-host", "${project.ext.dockerHostInternal}:host-gateway",
                "-e", "GP_HOST=${host}",
                "-e", "GP_PORT=${port}",
                "-e", "GP_USER=${username}",
                "-e", "GP_PASSWORD=${password}",
                "-e", "GP_LOAD_PORT=${gpLoadPort}",
                "-p", "${gpLoadPort}:${gpLoadPort}",
                "-v", "${project.file("runtime")}/test.sh:/tmp/test.sh",
                imageWithTag,
                "/bin/bash", "/tmp/test.sh"
        )
        println("running command: ${String.join(" ", execSpec.getCommandLine())}")
    }
}

apply from: project.file("docs.nginx.gradle")
