buildscript {
    repositories {
        maven { url("https://maven.aliyun.com/repository/public") }
        maven { url("https://maven.aliyun.com/repository/spring") }
        maven { url("https://maven.aliyun.com/repository/mapr-public") }
        maven { url("https://maven.aliyun.com/repository/spring-plugin") }
        maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
        maven { url("https://maven.aliyun.com/repository/google") }
        maven { url("https://maven.aliyun.com/repository/jcenter") }
    }
}
plugins {
    id "de.undercouch.download" version "4.1.1"
}

def mainVersion = "1.0.0"
Map<String, String> envMap = new HashMap<>(System.getenv())
def imageRepository = envMap.getOrDefault("IMAGE_REPOSITORY ", "wangz2019/greenplum-docker")
def greenplumPackageUrl = envMap.getOrDefault(
        "GREEN_PLUM_PACKAGE_URL",
        "https://github.com/greenplum-db/gpdb/releases/download/6.8.1/greenplum-db-6.8.1-rhel7-x86_64.rpm"
)
def arch = "amd64"
String imageWithTag = "${imageRepository}:${mainVersion}-${arch}"
File runtimeDockerDirectory = project.file("${project.buildDir}/runtime/docker")
task buildDockerImage(type: Exec) {
    def centosSystemdTag = "1.1.0-centos7.9.2009-linux-amd64"
    doFirst {
        runtimeDockerDirectory.parentFile.mkdirs()
        runtimeDockerDirectory.delete()
        copy {
            from project.file("docker")
            into runtimeDockerDirectory
        }
        String downloadDirectory = "${project.buildDir}/runtime/download"
        project.file(downloadDirectory).mkdirs()
        download {
            src greenplumPackageUrl
            dest downloadDirectory
            tempAndMove true
            overwrite false
        }
        copy {
            from project.file("${downloadDirectory}/greenplum-db-6.8.1-rhel7-x86_64.rpm")
            into runtimeDockerDirectory
        }
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "buildx",
            "build",
            "--platform", "linux/${arch}",
            "--rm", runtimeDockerDirectory,
            "-f", project.file("${runtimeDockerDirectory.getAbsolutePath()}/Dockerfile"),
            "-t", imageWithTag,
            "--build-arg", "CENTOS_SYSTEMD_TAG=${centosSystemdTag}",
    )
}

task pushDockerImage(type: Exec) {
    executable("docker")
    args(
            "push", imageWithTag,
    )
    dependsOn(buildDockerImage)
}

def keysDirectory = project.file("${project.buildDir}/runtime/keys")
task generateSshKey(type: Exec) {
    if (project.file("${keysDirectory}/id_rsa").exists()
            && project.file("${keysDirectory}/id_rsa.pub").exists()) {
        println("skip ${name} as files exists")
        enabled(false)
    }
    doFirst {
        keysDirectory.mkdirs()
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("ssh-keygen")
    args(
            "-t", "rsa",
            "-b", "4096",
            "-N", "",
            "-f", "${keysDirectory}/id_rsa"
    )
}

def containerName = "greenplum"
def masterhostname = "gpmaster"
task runMasterWithSlaveDockerContainer(type: Exec) {
    doFirst {
        keysDirectory.mkdirs()
        println("running command: ${String.join(" ", getCommandLine())}")
    }
    executable("docker")
    args(
            "run", "--rm",
            "-p", "1022:22",
            "-p", "5432:5432",
            "--platform=linux/amd64",
            "--name", containerName,
            "--hostname", masterhostname,
            "--privileged",
            "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
            "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
            "-e", "ROLE=MASTERWITHSLAVE",
            "-e", "HOSTNAME=${masterhostname}",
            "-d", imageWithTag
    )
    dependsOn(generateSshKey)
}

task initMasterWithSlaveGpService() {
    doLast {
        exec {
            commandLine(
                    "docker",
                    "exec", containerName,
                    "/opt/greenplum/entry_point.sh"
            )
        }
    }
}

def subnet = "172.18.0.0/16"
def netWorkName = "mynet"
task createNetwork(type: Exec){
    executable("docker")
    args(
            "network","create",
            "--subnet",subnet,
            netWorkName
    )
}

def masterIp = "172.18.0.22"
def slave01ContainerName = "slave01"
def slave01Ip = "172.18.0.23"
def slave01hostname = "slave01"
def slave02ContainerName = "slave02"
def slave02Ip = "172.18.0.24"
def slave02hostname = "slave02"
task runClusterDockerContainer() {
    doLast {
        exec {
            commandLine(
                    "docker",
                    "run", "--rm",
                    "--net", netWorkName,
                    "--ip", masterIp,
                    "-p", "1022:22",
                    "-p", "5432:5432",
                    "--platform=linux/amd64",
                    "--name", containerName,
                    "--hostname", masterhostname,
                    "--privileged",
                    "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
                    "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
                    "-e", "ROLE=CLUSTER",
                    "-e", "HOSTNAME=${masterhostname}",
                    "-e", "SLAVENAME=${slave01hostname} ${slave02hostname}",
                    "--add-host", slave01hostname + ":" + slave01Ip,
                    "--add-host", slave02hostname + ":" + slave02Ip,
                    "-d", imageWithTag
            )
        }
        exec {
            commandLine(
                    "run", "--rm",
                    "--net", netWorkName,
                    "--ip", slave01Ip,
                    "-p", "1023:22",
                    "-p", "5433:5432",
                    "--platform=linux/amd64",
                    "--name", slave01ContainerName,
                    "--hostname", slave01hostname,
                    "--privileged",
                    "-e", "ROLE=SLAVE",
                    "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
                    "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
                    "-d", imageWithTag
            )
        }
        exec {
            commandLine(
                    "docker",
                    "run", "--rm",
                    "--net", netWorkName,
                    "--ip", slave02Ip,
                    "-p", "1024:22",
                    "-p", "5434:5432",
                    "--platform=linux/amd64",
                    "--name", slave02ContainerName,
                    "--hostname", slave02hostname,
                    "--privileged",
                    "-e", "ROLE=SLAVE",
                    "-v", "${keysDirectory}/id_rsa.pub:/opt/greenplum/ssh/id_rsa.pub:ro",
                    "-v", "${keysDirectory}/id_rsa:/opt/greenplum/ssh/id_rsa:ro",
                    "-d", imageWithTag
            )
        }
    }
    dependsOn(generateSshKey)
}

task initClusterGpService() {
    doLast {
        exec {
            commandLine(
                    "docker",
                    "exec", containerName,
                    "/opt/greenplum/entry_point.sh",
            )
        }
        exec {
            commandLine(
                    "docker",
                    "exec", slave01ContainerName,
                    "/opt/greenplum/entry_point.sh",
            )
        }
        exec {
            commandLine(
                    "docker",
                    "exec", slave02ContainerName,
                    "/opt/greenplum/entry_point.sh",
            )
        }
    }
}

task testWithGpload() {
    doLast {
        exec {
            commandLine("docker", "cp", project.file("runtime"), "${containerName}:/home/gpadmin/runtime")
        }
        runGpAdminCommand(containerName, "createdb -h gpmaster -p 5432 mydatabase")
        runGpAdminCommand(containerName, "psql mydatabase -f /home/gpadmin/runtime/create.table.sql")
        runGpAdminCommand(containerName, "psql mydatabase -f /home/gpadmin/runtime/select.sql")
        runGpAdminCommand(containerName, "gpload -f /home/gpadmin/runtime/gpload.test.table.yaml")
        runGpAdminCommand(containerName, "psql mydatabase -f /home/gpadmin/runtime/select.sql")
    }
}

task stopMasterWithSlaveDockerContainer(type: Exec) {
    executable("docker")
    args(
            "stop", containerName
    )
}

task stopClusterDockerContainer() {
    doLast {
        exec {
            commandLine(
                    "docker",
                    "stop",containerName
            )
        }
        exec {
            commandLine(
                    "docker",
                    "stop",slave01ContainerName
            )
        }
        exec {
            commandLine(
                    "docker",
                    "stop",slave02ContainerName
            )
        }
    }
}

private ExecResult runGpAdminCommand(String containerName, String command) {
    exec {
        commandLine(
                "docker",
                "exec", "--user", "gpadmin", containerName,
                "bash", "-c", "source /home/gpadmin/.bashrc && ${command}"
        )
    }
}

apply from: project.file("docs.nginx.gradle")
